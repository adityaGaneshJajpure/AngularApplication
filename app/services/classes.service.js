"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var baseurl_1 = require("../shared/baseurl");
var process_httpmsg_service_1 = require("./process-httpmsg.service");
require("rxjs/add/operator/map");
require("rxjs/add/operator/delay");
require("rxjs/add/operator/catch");
var ClassesService = /** @class */ (function () {
    function ClassesService(http, processHttpmsgService) {
        this.http = http;
        this.processHttpmsgService = processHttpmsgService;
    }
    ClassesService.prototype.getAllClasses = function () {
        var _this = this;
        return this.http.get(baseurl_1.baseURL + 'classes').map(function (res) { return _this.processHttpmsgService.extractData(res); })._catch(function (error) { return _this.processHttpmsgService.handleError(error); });
        ;
    };
    ClassesService.prototype.getClass = function (id) {
        var _this = this;
        return this.http.get(baseurl_1.baseURL + 'classes/' + id).map(function (res) { return _this.processHttpmsgService.extractData(res); })._catch(function (error) { return _this.processHttpmsgService.handleError(error); });
        ;
    };
    ClassesService.prototype.getStudents = function (id) {
        var _this = this;
        return this.http.get(baseurl_1.baseURL + 'classes/' + id).map(function (res) { return _this.processHttpmsgService.extractData(res); })._catch(function (error) { return _this.processHttpmsgService.handleError(error); });
        ;
    };
    ClassesService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http, process_httpmsg_service_1.ProcessHTTPMsgService])
    ], ClassesService);
    return ClassesService;
}());
exports.ClassesService = ClassesService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Nlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xhc3Nlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQXlDO0FBS3pDLHNDQUE2QztBQUM3Qyw2Q0FBMEM7QUFDMUMscUVBQWlFO0FBQ2pFLGlDQUErQjtBQUMvQixtQ0FBaUM7QUFDakMsbUNBQWlDO0FBS2pDO0lBQ0ksd0JBQW1CLElBQVUsRUFBUyxxQkFBNEM7UUFBL0QsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUFTLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7SUFDaEYsQ0FBQztJQUVELHNDQUFhLEdBQWI7UUFBQSxpQkFHQztRQUZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsSUFBSyxNQUFNLENBQUMsS0FBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSyxNQUFNLENBQUMsS0FBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDO1FBQ25MLENBQUM7SUFDSCxDQUFDO0lBRUQsaUNBQVEsR0FBUixVQUFTLEVBQVM7UUFBbEIsaUJBR0M7UUFGQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQU8sR0FBRyxVQUFVLEdBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFLLE1BQU0sQ0FBQyxLQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsS0FBSyxJQUFLLE1BQU0sQ0FBQyxLQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDdkwsQ0FBQztJQUNILENBQUM7SUFFRCxvQ0FBVyxHQUFYLFVBQVksRUFBUztRQUFyQixpQkFHQztRQUZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBTyxHQUFHLFVBQVUsR0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUssTUFBTSxDQUFDLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUssTUFBTSxDQUFDLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQztRQUN2TCxDQUFDO0lBQ0gsQ0FBQztJQWpCTSxjQUFjO1FBRjFCLGlCQUFVLEVBQUU7eUNBR2dCLFdBQUksRUFBZ0MsK0NBQXFCO09BRHpFLGNBQWMsQ0FrQjFCO0lBQUQscUJBQUM7Q0FBQSxBQWxCRCxJQWtCQztBQWxCWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7U3R1ZGVudHN9IGZyb20gJy4uL3NoYXJlZC9zdHVkZW50cyc7XHJcbmltcG9ydCB7Q2xhc3Nlc30gZnJvbSAnLi4vc2hhcmVkL2NsYXNzZXMnO1xyXG5pbXBvcnQge0F0dGVuZGVuY2V9IGZyb20gJy4uL3NoYXJlZC9hdHRlbmRlbmNlJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQge0h0dHAsIFJlc3BvbnNlfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHtiYXNlVVJMfSBmcm9tICcuLi9zaGFyZWQvYmFzZXVybCc7XHJcbmltcG9ydCB7IFByb2Nlc3NIVFRQTXNnU2VydmljZX0gZnJvbSAnLi9wcm9jZXNzLWh0dHBtc2cuc2VydmljZSc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcclxuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9kZWxheSc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvY2F0Y2gnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuXHJcbmV4cG9ydCBjbGFzcyBDbGFzc2VzU2VydmljZXtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBodHRwOiBIdHRwLHByaXZhdGUgcHJvY2Vzc0h0dHBtc2dTZXJ2aWNlOiBQcm9jZXNzSFRUUE1zZ1NlcnZpY2UpIHtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIGdldEFsbENsYXNzZXMoKTpPYnNlcnZhYmxlPENsYXNzZXNbXT57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYmFzZVVSTCArICdjbGFzc2VzJykubWFwKHJlcyA9PiB7cmV0dXJuIHRoaXMucHJvY2Vzc0h0dHBtc2dTZXJ2aWNlLmV4dHJhY3REYXRhKHJlcyl9KS5fY2F0Y2goZXJyb3IgPT4ge3JldHVybiB0aGlzLnByb2Nlc3NIdHRwbXNnU2VydmljZS5oYW5kbGVFcnJvcihlcnJvcil9KTtcclxuICAgICAgICA7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBnZXRDbGFzcyhpZDpudW1iZXIpOk9ic2VydmFibGU8Q2xhc3Nlcz57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYmFzZVVSTCArICdjbGFzc2VzLycraWQpLm1hcChyZXMgPT4ge3JldHVybiB0aGlzLnByb2Nlc3NIdHRwbXNnU2VydmljZS5leHRyYWN0RGF0YShyZXMpfSkuX2NhdGNoKGVycm9yID0+IHtyZXR1cm4gdGhpcy5wcm9jZXNzSHR0cG1zZ1NlcnZpY2UuaGFuZGxlRXJyb3IoZXJyb3IpfSk7XHJcbiAgICAgICAgO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBnZXRTdHVkZW50cyhpZDpudW1iZXIpOk9ic2VydmFibGU8U3R1ZGVudHM+e1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGJhc2VVUkwgKyAnY2xhc3Nlcy8nK2lkKS5tYXAocmVzID0+IHtyZXR1cm4gdGhpcy5wcm9jZXNzSHR0cG1zZ1NlcnZpY2UuZXh0cmFjdERhdGEocmVzKX0pLl9jYXRjaChlcnJvciA9PiB7cmV0dXJuIHRoaXMucHJvY2Vzc0h0dHBtc2dTZXJ2aWNlLmhhbmRsZUVycm9yKGVycm9yKX0pO1xyXG4gICAgICAgIDtcclxuICAgICAgfVxyXG59Il19